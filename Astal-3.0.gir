<?xml version='1.0' encoding='utf-8'?>
<repository xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" version="1.2">
<include name="Gtk" version="3.0" />
<include name="GLib" version="2.0" />
<include name="GdkPixbuf" version="2.0" />
<include name="Gio" version="2.0" />
<include name="Gdk" version="3.0" />
<include name="AstalIO" version="0.1" />
<package name="astal" />
<c:include name="astal.h" />
<namespace name="Astal" version="3.0" c:prefix="Astal" c:identifier-prefixes="Astal" c:symbol-prefixes="astal" shared-library="libastal.so.3.0">
	<enumeration name="MouseButton" c:type="AstalMouseButton" glib:type-name="AstalMouseButton" glib:get-type="astal_mouse_button_get_type">
		<member name="primary" c:identifier="ASTAL_MOUSE_BUTTON_PRIMARY" value="1" />
		<member name="middle" c:identifier="ASTAL_MOUSE_BUTTON_MIDDLE" value="2" />
		<member name="secondary" c:identifier="ASTAL_MOUSE_BUTTON_SECONDARY" value="3" />
		<member name="back" c:identifier="ASTAL_MOUSE_BUTTON_BACK" value="4" />
		<member name="forward" c:identifier="ASTAL_MOUSE_BUTTON_FORWARD" value="5" />
	</enumeration>
	<enumeration name="WindowAnchor" c:type="AstalWindowAnchor" glib:type-name="AstalWindowAnchor" glib:get-type="astal_window_anchor_get_type">
		<member name="none" c:identifier="ASTAL_WINDOW_ANCHOR_NONE" value="0" />
		<member name="top" c:identifier="ASTAL_WINDOW_ANCHOR_TOP" value="1" />
		<member name="right" c:identifier="ASTAL_WINDOW_ANCHOR_RIGHT" value="2" />
		<member name="left" c:identifier="ASTAL_WINDOW_ANCHOR_LEFT" value="4" />
		<member name="bottom" c:identifier="ASTAL_WINDOW_ANCHOR_BOTTOM" value="8" />
	</enumeration>
	<enumeration name="Exclusivity" c:type="AstalExclusivity" glib:type-name="AstalExclusivity" glib:get-type="astal_exclusivity_get_type">
		<member name="normal" c:identifier="ASTAL_EXCLUSIVITY_NORMAL" value="0" />
		<member name="exclusive" c:identifier="ASTAL_EXCLUSIVITY_EXCLUSIVE" value="1">
			<doc xml:whitespace="preserve">Request the compositor to allocate space for this window.</doc>
		</member>
		<member name="ignore" c:identifier="ASTAL_EXCLUSIVITY_IGNORE" value="2">
			<doc xml:whitespace="preserve">Request the compositor to stack layers on top of each other.</doc>
		</member>
	</enumeration>
	<enumeration name="Layer" c:type="AstalLayer" glib:type-name="AstalLayer" glib:get-type="astal_layer_get_type">
		<member name="background" c:identifier="ASTAL_LAYER_BACKGROUND" value="0" />
		<member name="bottom" c:identifier="ASTAL_LAYER_BOTTOM" value="1" />
		<member name="top" c:identifier="ASTAL_LAYER_TOP" value="2" />
		<member name="overlay" c:identifier="ASTAL_LAYER_OVERLAY" value="3" />
	</enumeration>
	<enumeration name="Keymode" c:type="AstalKeymode" glib:type-name="AstalKeymode" glib:get-type="astal_keymode_get_type">
		<member name="none" c:identifier="ASTAL_KEYMODE_NONE" value="0">
			<doc xml:whitespace="preserve">Window should not receive keyboard events.</doc>
		</member>
		<member name="exclusive" c:identifier="ASTAL_KEYMODE_EXCLUSIVE" value="1">
			<doc xml:whitespace="preserve">Window should have exclusive focus if it is on the top or overlay layer.</doc>
		</member>
		<member name="on_demand" c:identifier="ASTAL_KEYMODE_ON_DEMAND" value="2">
			<doc xml:whitespace="preserve">Focus and Unfocues the window as needed.</doc>
		</member>
	</enumeration>
	<class name="Box" c:type="AstalBox" c:symbol-prefix="box" glib:type-name="AstalBox" glib:get-type="astal_box_get_type" glib:type-struct="BoxClass" parent="Gtk.Box">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Box" c:type="GtkBox" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="BoxPrivate" c:type="AstalBoxPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_box_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Box" c:type="AstalBox*" />
			</return-value>
			<parameters>
				<parameter name="vertical" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
				<parameter name="children" transfer-ownership="none">
					<type name="GLib.List" c:type="GList*">
						<type name="Gtk.Widget" c:type="GtkWidget*" />
					</type>
				</parameter>
			</parameters>
		</constructor>
		<property name="vertical" writable="1">
			<doc xml:whitespace="preserve">Corresponds to [property@Gtk.Orientable :orientation].</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_vertical" c:identifier="astal_box_get_vertical">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Box" c:type="AstalBox*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_vertical" c:identifier="astal_box_set_vertical">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Box" c:type="AstalBox*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<property name="children" writable="1">
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</type>
		</property>
		<method name="get_children" c:identifier="astal_box_get_children">
			<return-value transfer-ownership="container">
				<type name="GLib.List" c:type="GList*">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Box" c:type="AstalBox*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_children" c:identifier="astal_box_set_children">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Box" c:type="AstalBox*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GLib.List" c:type="GList*">
						<type name="Gtk.Widget" c:type="GtkWidget*" />
					</type>
				</parameter>
			</parameters>
		</method>
		<property name="child" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*" />
		</property>
		<method name="get_child" c:identifier="astal_box_get_child">
			<return-value transfer-ownership="full">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Box" c:type="AstalBox*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="astal_box_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Box" c:type="AstalBox*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="BoxClass" c:type="AstalBoxClass" glib:is-gtype-struct-for="Box">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.BoxClass" c:type="GtkBoxClass" />
		</field>
	</record>
	<record name="BoxPrivate" c:type="AstalBoxPrivate" disguised="1" />
	<class name="Button" c:type="AstalButton" c:symbol-prefix="button" glib:type-name="AstalButton" glib:get-type="astal_button_get_type" glib:type-struct="ButtonClass" parent="Gtk.Button">
		<doc xml:whitespace="preserve">This button has no extra functionality on top if its base [class@Gtk.Button] class.
The purpose of this Button subclass is to have a destructable struct as the argument in GJS event handlers.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Button" c:type="GtkButton" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ButtonPrivate" c:type="AstalButtonPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_button_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Button" c:type="AstalButton*" />
			</return-value>
		</constructor>
		<glib:signal name="hover">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.HoverEvent" c:type="AstalHoverEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="hover-lost">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.HoverEvent" c:type="AstalHoverEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="click">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.ClickEvent" c:type="AstalClickEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="click-release">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.ClickEvent" c:type="AstalClickEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="scroll">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.ScrollEvent" c:type="AstalScrollEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
	</class>
	<record name="ButtonClass" c:type="AstalButtonClass" glib:is-gtype-struct-for="Button">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ButtonClass" c:type="GtkButtonClass" />
		</field>
	</record>
	<record name="ButtonPrivate" c:type="AstalButtonPrivate" disguised="1" />
	<class name="CenterBox" c:type="AstalCenterBox" c:symbol-prefix="center_box" glib:type-name="AstalCenterBox" glib:get-type="astal_center_box_get_type" glib:type-struct="CenterBoxClass" parent="Gtk.Box">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Box" c:type="GtkBox" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CenterBoxPrivate" c:type="AstalCenterBoxPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_center_box_new">
			<return-value transfer-ownership="none">
				<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
			</return-value>
		</constructor>
		<property name="vertical" writable="1">
			<doc xml:whitespace="preserve">Corresponds to [property@Gtk.Orientable :orientation].</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_vertical" c:identifier="astal_center_box_get_vertical">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_vertical" c:identifier="astal_center_box_set_vertical">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<property name="start-widget" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*" />
		</property>
		<method name="get_start_widget" c:identifier="astal_center_box_get_start_widget">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_start_widget" c:identifier="astal_center_box_set_start_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</parameter>
			</parameters>
		</method>
		<property name="end-widget" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*" />
		</property>
		<method name="get_end_widget" c:identifier="astal_center_box_get_end_widget">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_end_widget" c:identifier="astal_center_box_set_end_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</parameter>
			</parameters>
		</method>
		<property name="center-widget" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*" />
		</property>
		<method name="get_center_widget" c:identifier="astal_center_box_get_center_widget">
			<return-value transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_center_widget" c:identifier="astal_center_box_set_center_widget">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CenterBox" c:type="AstalCenterBox*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="CenterBoxClass" c:type="AstalCenterBoxClass" glib:is-gtype-struct-for="CenterBox">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.BoxClass" c:type="GtkBoxClass" />
		</field>
	</record>
	<record name="CenterBoxPrivate" c:type="AstalCenterBoxPrivate" disguised="1" />
	<class name="CircularProgress" c:type="AstalCircularProgress" c:symbol-prefix="circular_progress" glib:type-name="AstalCircularProgress" glib:get-type="astal_circular_progress_get_type" glib:type-struct="CircularProgressClass" parent="Gtk.Bin">
		<doc xml:whitespace="preserve">CircularProgress is a subclass of [class@Gtk.Bin] which provides a circular progress bar with customizable properties such as starting 
and ending points, progress value, and visual features like rounded ends and inversion of progress direction.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Bin" c:type="GtkBin" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CircularProgressPrivate" c:type="AstalCircularProgressPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_circular_progress_new">
			<return-value transfer-ownership="none">
				<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
			</return-value>
		</constructor>
		<property name="start-at" writable="1">
			<doc xml:whitespace="preserve">The starting point of the progress circle, where 0 represents 3 o'clock position or 0° degrees and 1 represents 360°.</doc>
			<type name="gdouble" c:type="gdouble" />
		</property>
		<method name="get_start_at" c:identifier="astal_circular_progress_get_start_at">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_start_at" c:identifier="astal_circular_progress_set_start_at">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<property name="end-at" writable="1">
			<doc xml:whitespace="preserve">The cutoff point of the background color of the progress circle.</doc>
			<type name="gdouble" c:type="gdouble" />
		</property>
		<method name="get_end_at" c:identifier="astal_circular_progress_get_end_at">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_end_at" c:identifier="astal_circular_progress_set_end_at">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<property name="value" writable="1">
			<doc xml:whitespace="preserve">The value which determines the arc of the drawn foreground color. Should be a value between 0 and 1.</doc>
			<type name="gdouble" c:type="gdouble" />
		</property>
		<method name="get_value" c:identifier="astal_circular_progress_get_value">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_value" c:identifier="astal_circular_progress_set_value">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<property name="inverted" writable="1">
			<doc xml:whitespace="preserve">Inverts the progress direction, making it draw counterclockwise.</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_inverted" c:identifier="astal_circular_progress_get_inverted">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_inverted" c:identifier="astal_circular_progress_set_inverted">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<property name="rounded" writable="1">
			<doc xml:whitespace="preserve">Renders rounded ends at both the start and the end of the progress bar.</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_rounded" c:identifier="astal_circular_progress_get_rounded">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_rounded" c:identifier="astal_circular_progress_set_rounded">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.CircularProgress" c:type="AstalCircularProgress*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="CircularProgressClass" c:type="AstalCircularProgressClass" glib:is-gtype-struct-for="CircularProgress">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.BinClass" c:type="GtkBinClass" />
		</field>
	</record>
	<record name="CircularProgressPrivate" c:type="AstalCircularProgressPrivate" disguised="1" />
	<class name="EventBox" c:type="AstalEventBox" c:symbol-prefix="event_box" glib:type-name="AstalEventBox" glib:get-type="astal_event_box_get_type" glib:type-struct="EventBoxClass" parent="Gtk.EventBox">
		<doc xml:whitespace="preserve">EventBox is a [class@Gtk.EventBox] subclass which is meant to fix an issue with its [signal@Gtk.Widget::enter_notify_event] and 
[signal@Gtk.Widget::leave_notify_event] when nesting EventBoxes
Its css selector is `eventbox`.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.EventBox" c:type="GtkEventBox" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="EventBoxPrivate" c:type="AstalEventBoxPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_event_box_new">
			<return-value transfer-ownership="none">
				<type name="Astal.EventBox" c:type="AstalEventBox*" />
			</return-value>
		</constructor>
		<glib:signal name="hover">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.HoverEvent" c:type="AstalHoverEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="hover-lost">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.HoverEvent" c:type="AstalHoverEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="click">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.ClickEvent" c:type="AstalClickEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="click-release">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.ClickEvent" c:type="AstalClickEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="scroll">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.ScrollEvent" c:type="AstalScrollEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="motion">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="event" transfer-ownership="none">
					<type name="Astal.MotionEvent" c:type="AstalMotionEvent*" />
				</parameter>
			</parameters>
		</glib:signal>
	</class>
	<record name="EventBoxClass" c:type="AstalEventBoxClass" glib:is-gtype-struct-for="EventBox">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass" />
		</field>
	</record>
	<record name="EventBoxPrivate" c:type="AstalEventBoxPrivate" disguised="1" />
	<class name="Icon" c:type="AstalIcon" c:symbol-prefix="icon" glib:type-name="AstalIcon" glib:get-type="astal_icon_get_type" glib:type-struct="IconClass" parent="Gtk.Image">
		<doc xml:whitespace="preserve">[class@Gtk.Image] subclass meant to be used only for icons.
It's size is calculated from `font-size` css property. Its css selector is `icon`.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Image" c:type="GtkImage" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="IconPrivate" c:type="AstalIconPrivate*" />
		</field>
		<function name="lookup_icon" c:identifier="astal_icon_lookup_icon">
			<return-value transfer-ownership="full" nullable="1">
				<type name="Gtk.IconInfo" c:type="GtkIconInfo*" />
			</return-value>
			<parameters>
				<parameter name="icon" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</function>
		<constructor name="new" c:identifier="astal_icon_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Icon" c:type="AstalIcon*" />
			</return-value>
		</constructor>
		<property name="pixbuf" writable="1">
			<type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*" />
		</property>
		<method name="get_pixbuf" c:identifier="astal_icon_get_pixbuf">
			<return-value transfer-ownership="none">
				<type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Icon" c:type="AstalIcon*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_pixbuf" c:identifier="astal_icon_set_pixbuf">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Icon" c:type="AstalIcon*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*" />
				</parameter>
			</parameters>
		</method>
		<property name="g-icon" writable="1">
			<type name="Gio.Icon" c:type="GIcon*" />
		</property>
		<method name="get_g_icon" c:identifier="astal_icon_get_g_icon">
			<return-value transfer-ownership="none">
				<type name="Gio.Icon" c:type="GIcon*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Icon" c:type="AstalIcon*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_g_icon" c:identifier="astal_icon_set_g_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Icon" c:type="AstalIcon*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Icon" c:type="GIcon*" />
				</parameter>
			</parameters>
		</method>
		<property name="icon" writable="1">
			<doc xml:whitespace="preserve">Either a named icon or a path to a file.</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_icon" c:identifier="astal_icon_get_icon">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Icon" c:type="AstalIcon*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon" c:identifier="astal_icon_set_icon">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Icon" c:type="AstalIcon*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="IconClass" c:type="AstalIconClass" glib:is-gtype-struct-for="Icon">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ImageClass" c:type="GtkImageClass" />
		</field>
	</record>
	<record name="IconPrivate" c:type="AstalIconPrivate" disguised="1" />
	<class name="Label" c:type="AstalLabel" c:symbol-prefix="label" glib:type-name="AstalLabel" glib:get-type="astal_label_get_type" glib:type-struct="LabelClass" parent="Gtk.Label">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Label" c:type="GtkLabel" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="LabelPrivate" c:type="AstalLabelPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_label_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Label" c:type="AstalLabel*" />
			</return-value>
		</constructor>
		<property name="truncate" writable="1">
			<doc xml:whitespace="preserve">Shortcut for setting [property@Gtk.Label:ellipsize] to [enum@Pango.EllipsizeMode.END]</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_truncate" c:identifier="astal_label_get_truncate">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Label" c:type="AstalLabel*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_truncate" c:identifier="astal_label_set_truncate">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Label" c:type="AstalLabel*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<property name="justify-fill" writable="1">
			<doc xml:whitespace="preserve">Shortcut for setting [property@Gtk.Label:justify] to [enum@Gtk.Justification.FILL]</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_justify_fill" c:identifier="astal_label_get_justify_fill">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Label" c:type="AstalLabel*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_justify_fill" c:identifier="astal_label_set_justify_fill">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Label" c:type="AstalLabel*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="LabelClass" c:type="AstalLabelClass" glib:is-gtype-struct-for="Label">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.LabelClass" c:type="GtkLabelClass" />
		</field>
	</record>
	<record name="LabelPrivate" c:type="AstalLabelPrivate" disguised="1" />
	<class name="LevelBar" c:type="AstalLevelBar" c:symbol-prefix="level_bar" glib:type-name="AstalLevelBar" glib:get-type="astal_level_bar_get_type" glib:type-struct="LevelBarClass" parent="Gtk.LevelBar">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.LevelBar" c:type="GtkLevelBar" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="LevelBarPrivate" c:type="AstalLevelBarPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_level_bar_new">
			<return-value transfer-ownership="none">
				<type name="Astal.LevelBar" c:type="AstalLevelBar*" />
			</return-value>
		</constructor>
		<property name="vertical" writable="1">
			<doc xml:whitespace="preserve">Corresponds to [property@Gtk.Orientable :orientation].</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_vertical" c:identifier="astal_level_bar_get_vertical">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.LevelBar" c:type="AstalLevelBar*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_vertical" c:identifier="astal_level_bar_set_vertical">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.LevelBar" c:type="AstalLevelBar*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="LevelBarClass" c:type="AstalLevelBarClass" glib:is-gtype-struct-for="LevelBar">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.LevelBarClass" c:type="GtkLevelBarClass" />
		</field>
	</record>
	<record name="LevelBarPrivate" c:type="AstalLevelBarPrivate" disguised="1" />
	<class name="Overlay" c:type="AstalOverlay" c:symbol-prefix="overlay" glib:type-name="AstalOverlay" glib:get-type="astal_overlay_get_type" glib:type-struct="OverlayClass" parent="Gtk.Overlay">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Overlay" c:type="GtkOverlay" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="OverlayPrivate" c:type="AstalOverlayPrivate*" />
		</field>
		<method name="add_overlay" c:identifier="astal_overlay_add_overlay">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
				<parameter name="widget" transfer-ownership="none">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="astal_overlay_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Overlay" c:type="AstalOverlay*" />
			</return-value>
		</constructor>
		<property name="pass-through" writable="1">
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_pass_through" c:identifier="astal_overlay_get_pass_through">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_pass_through" c:identifier="astal_overlay_set_pass_through">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<property name="overlay" writable="1">
			<doc xml:whitespace="preserve">First [property@Astal.Overlay:overlays] element.
WARNING: setting this value will remove every overlay but the first.</doc>
			<type name="Gtk.Widget" c:type="GtkWidget*" />
		</property>
		<method name="get_overlay" c:identifier="astal_overlay_get_overlay">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_overlay" c:identifier="astal_overlay_set_overlay">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</parameter>
			</parameters>
		</method>
		<property name="overlays" writable="1">
			<doc xml:whitespace="preserve">Sets the overlays of this Overlay. [method@Gtk.Overlay.add_overlay].</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</type>
		</property>
		<method name="get_overlays" c:identifier="astal_overlay_get_overlays">
			<return-value transfer-ownership="container">
				<type name="GLib.List" c:type="GList*">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_overlays" c:identifier="astal_overlay_set_overlays">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GLib.List" c:type="GList*">
						<type name="Gtk.Widget" c:type="GtkWidget*" />
					</type>
				</parameter>
			</parameters>
		</method>
		<property name="child" writable="1">
			<type name="Gtk.Widget" c:type="GtkWidget*" />
		</property>
		<method name="get_child" c:identifier="astal_overlay_get_child">
			<return-value transfer-ownership="none" nullable="1">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_child" c:identifier="astal_overlay_set_child">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Overlay" c:type="AstalOverlay*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" nullable="1">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="OverlayClass" c:type="AstalOverlayClass" glib:is-gtype-struct-for="Overlay">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.OverlayClass" c:type="GtkOverlayClass" />
		</field>
	</record>
	<record name="OverlayPrivate" c:type="AstalOverlayPrivate" disguised="1" />
	<class name="Scrollable" c:type="AstalScrollable" c:symbol-prefix="scrollable" glib:type-name="AstalScrollable" glib:get-type="astal_scrollable_get_type" glib:type-struct="ScrollableClass" parent="Gtk.ScrolledWindow">
		<doc xml:whitespace="preserve">Subclass of [class@Gtk.ScrolledWindow] which has its policy default to [enum@Gtk.PolicyType.AUTOMATIC].
Its css selector is `scrollable`. Its child getter returns the child of the inner [class@Gtk.Viewport], instead of the viewport.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ScrollablePrivate" c:type="AstalScrollablePrivate*" />
		</field>
		<method name="get_child" c:identifier="astal_scrollable_get_child">
			<return-value transfer-ownership="full">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Scrollable" c:type="AstalScrollable*" />
				</instance-parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="astal_scrollable_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Scrollable" c:type="AstalScrollable*" />
			</return-value>
		</constructor>
		<property name="hscroll" writable="1">
			<type name="Gtk.PolicyType" c:type="GtkPolicyType" />
		</property>
		<method name="get_hscroll" c:identifier="astal_scrollable_get_hscroll">
			<return-value transfer-ownership="none">
				<type name="Gtk.PolicyType" c:type="GtkPolicyType" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Scrollable" c:type="AstalScrollable*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_hscroll" c:identifier="astal_scrollable_set_hscroll">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Scrollable" c:type="AstalScrollable*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.PolicyType" c:type="GtkPolicyType" />
				</parameter>
			</parameters>
		</method>
		<property name="vscroll" writable="1">
			<type name="Gtk.PolicyType" c:type="GtkPolicyType" />
		</property>
		<method name="get_vscroll" c:identifier="astal_scrollable_get_vscroll">
			<return-value transfer-ownership="none">
				<type name="Gtk.PolicyType" c:type="GtkPolicyType" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Scrollable" c:type="AstalScrollable*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_vscroll" c:identifier="astal_scrollable_set_vscroll">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Scrollable" c:type="AstalScrollable*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gtk.PolicyType" c:type="GtkPolicyType" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ScrollableClass" c:type="AstalScrollableClass" glib:is-gtype-struct-for="Scrollable">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ScrolledWindowClass" c:type="GtkScrolledWindowClass" />
		</field>
	</record>
	<record name="ScrollablePrivate" c:type="AstalScrollablePrivate" disguised="1" />
	<class name="Slider" c:type="AstalSlider" c:symbol-prefix="slider" glib:type-name="AstalSlider" glib:get-type="astal_slider_get_type" glib:type-struct="SliderClass" parent="Gtk.Scale">
		<doc xml:whitespace="preserve">Subclass of [class@Gtk.Scale] which adds a signal and property for the drag state.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Scale" c:type="GtkScale" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="SliderPrivate" c:type="AstalSliderPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_slider_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Slider" c:type="AstalSlider*" />
			</return-value>
		</constructor>
		<property name="vertical" writable="1">
			<doc xml:whitespace="preserve">Corresponds to [property@Gtk.Orientable :orientation].</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_vertical" c:identifier="astal_slider_get_vertical">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_vertical" c:identifier="astal_slider_set_vertical">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<property name="dragging" writable="1">
			<doc xml:whitespace="preserve">`true` when the user drags the slider or uses keyboard arrows.</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_dragging" c:identifier="astal_slider_get_dragging">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
			</parameters>
		</method>
		<property name="value" writable="1">
			<doc xml:whitespace="preserve">Value of this slider. Defaults to `0`.</doc>
			<type name="gdouble" c:type="gdouble" />
		</property>
		<method name="get_value" c:identifier="astal_slider_get_value">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_value" c:identifier="astal_slider_set_value">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<property name="min" writable="1">
			<doc xml:whitespace="preserve">Minimum possible value of this slider. Defaults to `0`.</doc>
			<type name="gdouble" c:type="gdouble" />
		</property>
		<method name="get_min" c:identifier="astal_slider_get_min">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_min" c:identifier="astal_slider_set_min">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<property name="max" writable="1">
			<doc xml:whitespace="preserve">Maximum possible value of this slider. Defaults to `1`.</doc>
			<type name="gdouble" c:type="gdouble" />
		</property>
		<method name="get_max" c:identifier="astal_slider_get_max">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_max" c:identifier="astal_slider_set_max">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<property name="step" writable="1">
			<doc xml:whitespace="preserve">Size of step increments. Defaults to `0.05`.</doc>
			<type name="gdouble" c:type="gdouble" />
		</property>
		<method name="get_step" c:identifier="astal_slider_get_step">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_step" c:identifier="astal_slider_set_step">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Slider" c:type="AstalSlider*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble" />
				</parameter>
			</parameters>
		</method>
		<glib:signal name="dragged">
			<doc xml:whitespace="preserve">Emitted when the user drags the slider or uses keyboard arrows and its value changes.</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
		</glib:signal>
	</class>
	<record name="SliderClass" c:type="AstalSliderClass" glib:is-gtype-struct-for="Slider">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ScaleClass" c:type="GtkScaleClass" />
		</field>
	</record>
	<record name="SliderPrivate" c:type="AstalSliderPrivate" disguised="1" />
	<class name="Stack" c:type="AstalStack" c:symbol-prefix="stack" glib:type-name="AstalStack" glib:get-type="astal_stack_get_type" glib:type-struct="StackClass" parent="Gtk.Stack">
		<doc xml:whitespace="preserve">Subclass of [class@Gtk.Stack] that has a children setter which invokes [method@Gt.Stack.add_named] with the child's [property
@Gtk.Widget:name] property.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Stack" c:type="GtkStack" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="StackPrivate" c:type="AstalStackPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_stack_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Stack" c:type="AstalStack*" />
			</return-value>
		</constructor>
		<property name="shown" writable="1">
			<doc xml:whitespace="preserve">Same as [property@Gtk.Stack:visible-child-name].</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_shown" c:identifier="astal_stack_get_shown">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Stack" c:type="AstalStack*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_shown" c:identifier="astal_stack_set_shown">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Stack" c:type="AstalStack*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<property name="children" writable="1">
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</type>
		</property>
		<method name="get_children" c:identifier="astal_stack_get_children">
			<return-value transfer-ownership="container">
				<type name="GLib.List" c:type="GList*">
					<type name="Gtk.Widget" c:type="GtkWidget*" />
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Stack" c:type="AstalStack*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_children" c:identifier="astal_stack_set_children">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Stack" c:type="AstalStack*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GLib.List" c:type="GList*">
						<type name="Gtk.Widget" c:type="GtkWidget*" />
					</type>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="StackClass" c:type="AstalStackClass" glib:is-gtype-struct-for="Stack">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.StackClass" c:type="GtkStackClass" />
		</field>
	</record>
	<record name="StackPrivate" c:type="AstalStackPrivate" disguised="1" />
	<class name="Window" c:type="AstalWindow" c:symbol-prefix="window" glib:type-name="AstalWindow" glib:get-type="astal_window_get_type" glib:type-struct="WindowClass" parent="Gtk.Window">
		<doc xml:whitespace="preserve">Subclass of [class@Gtk.Window] which integrates GtkLayerShell as class fields.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Window" c:type="GtkWindow" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="WindowPrivate" c:type="AstalWindowPrivate*" />
		</field>
		<constructor name="new" c:identifier="astal_window_new">
			<return-value transfer-ownership="none">
				<type name="Astal.Window" c:type="AstalWindow*" />
			</return-value>
		</constructor>
		<property name="inhibit" writable="1">
			<doc xml:whitespace="preserve">When `true` it will permit inhibiting the idle behavior such as screen blanking, locking, and screensaving.</doc>
			<type name="gboolean" c:type="gboolean" />
		</property>
		<method name="get_inhibit" c:identifier="astal_window_get_inhibit">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_inhibit" c:identifier="astal_window_set_inhibit">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<property name="namespace" writable="1">
			<doc xml:whitespace="preserve">Namespace of this window. This can be used to target the layer in compositor rules.</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_namespace" c:identifier="astal_window_get_namespace">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_namespace" c:identifier="astal_window_set_namespace">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<property name="anchor" writable="1">
			<doc xml:whitespace="preserve">Edges to anchor the window to.
If two perpendicular edges are anchored, the surface will be anchored to that corner. If two opposite edges are anchored, the window will be 
stretched across the screen in that direction.</doc>
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_anchor" c:identifier="astal_window_get_anchor">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_anchor" c:identifier="astal_window_set_anchor">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<property name="exclusivity" writable="1">
			<doc xml:whitespace="preserve">Exclusivity of this window.</doc>
			<type name="Astal.Exclusivity" c:type="AstalExclusivity" />
		</property>
		<method name="get_exclusivity" c:identifier="astal_window_get_exclusivity">
			<return-value transfer-ownership="none">
				<type name="Astal.Exclusivity" c:type="AstalExclusivity" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_exclusivity" c:identifier="astal_window_set_exclusivity">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Astal.Exclusivity" c:type="AstalExclusivity" />
				</parameter>
			</parameters>
		</method>
		<property name="layer" writable="1">
			<doc xml:whitespace="preserve">Which layer to appear this window on.</doc>
			<type name="Astal.Layer" c:type="AstalLayer" />
		</property>
		<method name="get_layer" c:identifier="astal_window_get_layer">
			<return-value transfer-ownership="none">
				<type name="Astal.Layer" c:type="AstalLayer" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_layer" c:identifier="astal_window_set_layer">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Astal.Layer" c:type="AstalLayer" />
				</parameter>
			</parameters>
		</method>
		<property name="keymode" writable="1">
			<doc xml:whitespace="preserve">Keyboard mode of this window.</doc>
			<type name="Astal.Keymode" c:type="AstalKeymode" />
		</property>
		<method name="get_keymode" c:identifier="astal_window_get_keymode">
			<return-value transfer-ownership="none">
				<type name="Astal.Keymode" c:type="AstalKeymode" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_keymode" c:identifier="astal_window_set_keymode">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Astal.Keymode" c:type="AstalKeymode" />
				</parameter>
			</parameters>
		</method>
		<property name="gdkmonitor" writable="1">
			<doc xml:whitespace="preserve">Which monitor to appear this window on.</doc>
			<type name="Gdk.Monitor" c:type="GdkMonitor*" />
		</property>
		<method name="get_gdkmonitor" c:identifier="astal_window_get_gdkmonitor">
			<return-value transfer-ownership="none">
				<type name="Gdk.Monitor" c:type="GdkMonitor*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_gdkmonitor" c:identifier="astal_window_set_gdkmonitor">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gdk.Monitor" c:type="GdkMonitor*" />
				</parameter>
			</parameters>
		</method>
		<property name="margin-top" writable="1">
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_margin_top" c:identifier="astal_window_get_margin_top">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_margin_top" c:identifier="astal_window_set_margin_top">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<property name="margin-bottom" writable="1">
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_margin_bottom" c:identifier="astal_window_get_margin_bottom">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_margin_bottom" c:identifier="astal_window_set_margin_bottom">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<property name="margin-left" writable="1">
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_margin_left" c:identifier="astal_window_get_margin_left">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_margin_left" c:identifier="astal_window_set_margin_left">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<property name="margin-right" writable="1">
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_margin_right" c:identifier="astal_window_get_margin_right">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_margin_right" c:identifier="astal_window_set_margin_right">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<property name="margin" readable="0" writable="1">
			<type name="gint" c:type="gint" />
		</property>
		<method name="set_margin" c:identifier="astal_window_set_margin">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
		<property name="monitor" writable="1">
			<doc xml:whitespace="preserve">Which monitor to appear this window on.
CAUTION: the id might not be the same mapped by the compositor.</doc>
			<type name="gint" c:type="gint" />
		</property>
		<method name="get_monitor" c:identifier="astal_window_get_monitor">
			<return-value transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_monitor" c:identifier="astal_window_set_monitor">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Window" c:type="AstalWindow*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint" />
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="WindowClass" c:type="AstalWindowClass" glib:is-gtype-struct-for="Window">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.WindowClass" c:type="GtkWindowClass" />
		</field>
	</record>
	<record name="WindowPrivate" c:type="AstalWindowPrivate" disguised="1" />
	<class name="Application" c:type="AstalApplication" c:symbol-prefix="application" glib:type-name="AstalApplication" glib:get-type="astal_application_get_type" glib:type-struct="ApplicationClass" parent="Gtk.Application">
		<implements name="AstalIO.Application" />
		<field name="parent_instance" readable="0" private="1">
			<type name="Gtk.Application" c:type="GtkApplication" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ApplicationPrivate" c:type="AstalApplicationPrivate*" />
		</field>
		<method name="reset_css" c:identifier="astal_application_reset_css">
			<doc xml:whitespace="preserve">Remove all [class@Gtk.StyleContext] providers.</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="get_window" c:identifier="astal_application_get_window">
			<doc xml:whitespace="preserve">Get a window by its [property@Gtk.Widget:name] that has been added to this app using [method@Gtk.Application.add_window].</doc>
			<return-value transfer-ownership="full" nullable="1">
				<type name="Gtk.Window" c:type="GtkWindow*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method name="apply_css" c:identifier="astal_application_apply_css">
			<doc xml:whitespace="preserve">Add a new [class@Gtk.StyleContext] provider.</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="style" transfer-ownership="none">
					<doc xml:whitespace="preserve">Css string or a path to a css file. </doc>
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="reset" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean" />
				</parameter>
			</parameters>
		</method>
		<method name="add_icons" c:identifier="astal_application_add_icons">
			<doc xml:whitespace="preserve">Shortcut for [method@Gtk.IconTheme.prepend_search_path].</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="path" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method name="request" c:identifier="astal_application_request">
			<doc xml:whitespace="preserve">Handler for an incoming request.</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="msg" transfer-ownership="none">
					<doc xml:whitespace="preserve">Body of the message </doc>
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="conn" transfer-ownership="none">
					<doc xml:whitespace="preserve">The connection which expects the response. </doc>
					<type name="Gio.SocketConnection" c:type="GSocketConnection*" />
				</parameter>
			</parameters>
		</method>
		<virtual-method name="request" invoker="request">
			<doc xml:whitespace="preserve">Handler for an incoming request.</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="msg" transfer-ownership="none">
					<doc xml:whitespace="preserve">Body of the message </doc>
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="conn" transfer-ownership="none">
					<doc xml:whitespace="preserve">The connection which expects the response. </doc>
					<type name="Gio.SocketConnection" c:type="GSocketConnection*" />
				</parameter>
			</parameters>
		</virtual-method>
		<constructor name="new" c:identifier="astal_application_new">
			<return-value transfer-ownership="full">
				<type name="Astal.Application" c:type="AstalApplication*" />
			</return-value>
		</constructor>
		<property name="monitors">
			<doc xml:whitespace="preserve">Get all monitors from [class@Gdk.Display].</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="Gdk.Monitor" c:type="GdkMonitor*" />
			</type>
		</property>
		<method name="get_monitors" c:identifier="astal_application_get_monitors">
			<return-value transfer-ownership="container">
				<type name="GLib.List" c:type="GList*">
					<type name="Gdk.Monitor" c:type="GdkMonitor*" />
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
			</parameters>
		</method>
		<property name="windows">
			<doc xml:whitespace="preserve">Windows that has been added to this app using [method@Gtk.Application.add_window].</doc>
			<type name="GLib.List" c:type="GList*">
				<type name="Gtk.Window" c:type="GtkWindow*" />
			</type>
		</property>
		<method name="get_windows" c:identifier="astal_application_get_windows">
			<return-value transfer-ownership="none">
				<type name="GLib.List" c:type="GList*">
					<type name="Gtk.Window" c:type="GtkWindow*" />
				</type>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
			</parameters>
		</method>
		<property name="gtk-theme" writable="1">
			<doc xml:whitespace="preserve">Shortcut for [property@Gtk.Settings:gtk_theme_name]</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_gtk_theme" c:identifier="astal_application_get_gtk_theme">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_gtk_theme" c:identifier="astal_application_set_gtk_theme">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<property name="icon-theme" writable="1">
			<doc xml:whitespace="preserve">Shortcut for [property@Gtk.Settings:gtk_icon_theme_name]</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_icon_theme" c:identifier="astal_application_get_icon_theme">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_icon_theme" c:identifier="astal_application_set_icon_theme">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<property name="cursor-theme" writable="1">
			<doc xml:whitespace="preserve">Shortcut for [property@Gtk.Settings:gtk_cursor_theme_name]</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_cursor_theme" c:identifier="astal_application_get_cursor_theme">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_cursor_theme" c:identifier="astal_application_set_cursor_theme">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Astal.Application" c:type="AstalApplication*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<glib:signal name="monitor-added">
			<doc xml:whitespace="preserve">Emitted when a new monitor is added to [class@Gdk.Display].</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="monitor" transfer-ownership="none">
					<type name="Gdk.Monitor" c:type="GdkMonitor*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="monitor-removed">
			<doc xml:whitespace="preserve">Emitted when a monitor is disconnected from [class@Gdk.Display].</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="monitor" transfer-ownership="none">
					<type name="Gdk.Monitor" c:type="GdkMonitor*" />
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="window-toggled">
			<doc xml:whitespace="preserve">Emitted when a window that has been added using [method@Gtk.Application.add_window] changes its visibility .</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="window" transfer-ownership="none">
					<type name="Gtk.Window" c:type="GtkWindow*" />
				</parameter>
			</parameters>
		</glib:signal>
	</class>
	<record name="ApplicationClass" c:type="AstalApplicationClass" glib:is-gtype-struct-for="Application">
		<field name="parent_class" readable="0" private="1">
			<type name="Gtk.ApplicationClass" c:type="GtkApplicationClass" />
		</field>
		<field name="request">
			<callback name="request" c:type="request">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void" />
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="Astal.Application" c:type="AstalApplication*" />
					</parameter>
					<parameter name="msg" transfer-ownership="none">
						<doc xml:whitespace="preserve">Body of the message </doc>
						<type name="utf8" c:type="const gchar*" />
					</parameter>
					<parameter name="conn" transfer-ownership="none">
						<doc xml:whitespace="preserve">The connection which expects the response. </doc>
						<type name="Gio.SocketConnection" c:type="GSocketConnection*" />
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ApplicationPrivate" c:type="AstalApplicationPrivate" disguised="1" />
	<record name="ClickEvent" c:type="AstalClickEvent" c:symbol-prefix="click_event" glib:type-name="AstalClickEvent" glib:get-type="astal_click_event_get_type">
		<doc xml:whitespace="preserve">Struct for [struct@Gdk.EventButton]</doc>
		<field name="release" writable="1">
			<type name="gboolean" c:type="gboolean" />
		</field>
		<field name="time" writable="1">
			<type name="guint" c:type="guint" />
		</field>
		<field name="x" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="y" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="modifier" writable="1">
			<type name="Gdk.ModifierType" c:type="GdkModifierType" />
		</field>
		<field name="button" writable="1">
			<type name="Astal.MouseButton" c:type="AstalMouseButton" />
		</field>
		<method name="init" c:identifier="astal_click_event_init">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="Astal.ClickEvent" c:type="AstalClickEvent*" />
				</instance-parameter>
				<parameter name="event" transfer-ownership="none">
					<type name="Gdk.EventButton" c:type="GdkEventButton*" />
				</parameter>
			</parameters>
		</method>
	</record>
	<record name="HoverEvent" c:type="AstalHoverEvent" c:symbol-prefix="hover_event" glib:type-name="AstalHoverEvent" glib:get-type="astal_hover_event_get_type">
		<doc xml:whitespace="preserve">Struct for [struct@Gdk.EventCrossing]</doc>
		<field name="lost" writable="1">
			<type name="gboolean" c:type="gboolean" />
		</field>
		<field name="time" writable="1">
			<type name="guint" c:type="guint" />
		</field>
		<field name="x" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="y" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="modifier" writable="1">
			<type name="Gdk.ModifierType" c:type="GdkModifierType" />
		</field>
		<field name="mode" writable="1">
			<type name="Gdk.CrossingMode" c:type="GdkCrossingMode" />
		</field>
		<field name="detail" writable="1">
			<type name="Gdk.NotifyType" c:type="GdkNotifyType" />
		</field>
		<method name="init" c:identifier="astal_hover_event_init">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="Astal.HoverEvent" c:type="AstalHoverEvent*" />
				</instance-parameter>
				<parameter name="event" transfer-ownership="none">
					<type name="Gdk.EventCrossing" c:type="GdkEventCrossing*" />
				</parameter>
			</parameters>
		</method>
	</record>
	<record name="ScrollEvent" c:type="AstalScrollEvent" c:symbol-prefix="scroll_event" glib:type-name="AstalScrollEvent" glib:get-type="astal_scroll_event_get_type">
		<doc xml:whitespace="preserve">Struct for [struct@Gdk.EventScroll]</doc>
		<field name="time" writable="1">
			<type name="guint" c:type="guint" />
		</field>
		<field name="x" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="y" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="modifier" writable="1">
			<type name="Gdk.ModifierType" c:type="GdkModifierType" />
		</field>
		<field name="direction" writable="1">
			<type name="Gdk.ScrollDirection" c:type="GdkScrollDirection" />
		</field>
		<field name="delta_x" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="delta_y" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<method name="init" c:identifier="astal_scroll_event_init">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="Astal.ScrollEvent" c:type="AstalScrollEvent*" />
				</instance-parameter>
				<parameter name="event" transfer-ownership="none">
					<type name="Gdk.EventScroll" c:type="GdkEventScroll*" />
				</parameter>
			</parameters>
		</method>
	</record>
	<record name="MotionEvent" c:type="AstalMotionEvent" c:symbol-prefix="motion_event" glib:type-name="AstalMotionEvent" glib:get-type="astal_motion_event_get_type">
		<doc xml:whitespace="preserve">Struct for [struct@Gdk.EventMotion]</doc>
		<field name="time" writable="1">
			<type name="guint" c:type="guint" />
		</field>
		<field name="x" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="y" writable="1">
			<type name="gdouble" c:type="gdouble" />
		</field>
		<field name="modifier" writable="1">
			<type name="Gdk.ModifierType" c:type="GdkModifierType" />
		</field>
		<method name="init" c:identifier="astal_motion_event_init">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" direction="out" transfer-ownership="none" caller-allocates="1">
					<type name="Astal.MotionEvent" c:type="AstalMotionEvent*" />
				</instance-parameter>
				<parameter name="event" transfer-ownership="none">
					<type name="Gdk.EventMotion" c:type="GdkEventMotion*" />
				</parameter>
			</parameters>
		</method>
	</record>
	<constant name="MAJOR_VERSION" c:identifier="ASTAL_MAJOR_VERSION" value="3" type="ASTAL_MAJOR_VERSION">
		<type name="gint" c:type="gint" />
	</constant>
	<constant name="MINOR_VERSION" c:identifier="ASTAL_MINOR_VERSION" value="0" type="ASTAL_MINOR_VERSION">
		<type name="gint" c:type="gint" />
	</constant>
	<constant name="MICRO_VERSION" c:identifier="ASTAL_MICRO_VERSION" value="0" type="ASTAL_MICRO_VERSION">
		<type name="gint" c:type="gint" />
	</constant>
	<constant name="VERSION" c:identifier="ASTAL_VERSION" value="3.0.0" type="ASTAL_VERSION">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<function name="widget_set_css" c:identifier="astal_widget_set_css">
		<return-value transfer-ownership="full">
			<type name="none" c:type="void" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
			<parameter name="css" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_get_css" c:identifier="astal_widget_get_css">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_set_class_names" c:identifier="astal_widget_set_class_names">
		<return-value transfer-ownership="full">
			<type name="none" c:type="void" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
			<parameter name="class_names" transfer-ownership="none">
				<array length="2" c:type="gchar**">
					<type name="utf8" c:type="gchar*" />
				</array>
			</parameter>
			<parameter name="class_names_length1" transfer-ownership="none">
				<type name="gint" c:type="gint" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_get_class_names" c:identifier="astal_widget_get_class_names">
		<return-value transfer-ownership="container">
			<type name="GLib.List" c:type="GList*">
				<type name="utf8" c:type="const gchar*" />
			</type>
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_toggle_class_name" c:identifier="astal_widget_toggle_class_name">
		<return-value transfer-ownership="full">
			<type name="none" c:type="void" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
			<parameter name="class_name" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</parameter>
			<parameter name="condition" transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_set_cursor" c:identifier="astal_widget_set_cursor">
		<return-value transfer-ownership="full">
			<type name="none" c:type="void" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
			<parameter name="cursor" transfer-ownership="none">
				<type name="utf8" c:type="const gchar*" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_get_cursor" c:identifier="astal_widget_get_cursor">
		<return-value transfer-ownership="full">
			<type name="utf8" c:type="gchar*" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_set_click_through" c:identifier="astal_widget_set_click_through">
		<return-value transfer-ownership="full">
			<type name="none" c:type="void" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
			<parameter name="click_through" transfer-ownership="none">
				<type name="gboolean" c:type="gboolean" />
			</parameter>
		</parameters>
	</function>
	<function name="widget_get_click_through" c:identifier="astal_widget_get_click_through">
		<return-value transfer-ownership="full">
			<type name="gboolean" c:type="gboolean" />
		</return-value>
		<parameters>
			<parameter name="widget" transfer-ownership="none">
				<type name="Gtk.Widget" c:type="GtkWidget*" />
			</parameter>
		</parameters>
	</function>
</namespace>
</repository>
