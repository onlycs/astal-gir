<?xml version='1.0' encoding='utf-8'?>
<repository xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" version="1.2">
<include name="GObject" version="2.0" />
<package name="astal-power-profiles" />
<c:include name="astal-power-profiles.h" />
<namespace name="AstalPowerProfiles" version="0.1" c:prefix="AstalPowerProfiles" c:identifier-prefixes="AstalPowerProfiles" c:symbol-prefixes="astal_power_profiles">
	<class name="PowerProfiles" c:type="AstalPowerProfilesPowerProfiles" c:symbol-prefix="power_profiles" glib:type-name="AstalPowerProfilesPowerProfiles" glib:get-type="astal_power_profiles_power_profiles_get_type" glib:type-struct="PowerProfilesClass" parent="GObject.Object">
		<doc xml:whitespace="preserve">Client for &lt;ulink url="https://freedesktop-team.pages.debian.net/power-profiles-daemon/gdbus-org.freedesktop.UPower.PowerProfiles.html"&gt;
  PowerProfiles&lt;/ulink&gt;.</doc>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject" />
		</field>
		<field name="priv" readable="0" private="1">
			<type name="PowerProfilesPrivate" c:type="AstalPowerProfilesPowerProfilesPrivate*" />
		</field>
		<function name="get_default" c:identifier="astal_power_profiles_power_profiles_get_default">
			<doc xml:whitespace="preserve">Gets the default singleton PowerProfiles instance.</doc>
			<return-value transfer-ownership="full">
				<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
			</return-value>
		</function>
		<method name="hold_profile" c:identifier="astal_power_profiles_power_profiles_hold_profile">
			<doc xml:whitespace="preserve">This forces the passed profile (either 'power-saver' or 'performance') to be activated until either the caller 
quits, [method@AstalPowerProfiles.PowerProfiles.release_profile] is called, or the [property@
AstalPowerProfiles.PowerProfiles:active_profile] is changed by the user. When conflicting profiles are requested to be held, the 'power-saver
' profile will be activated in preference to the 'performance' profile. Those holds will be automatically cancelled if the user 
manually switches to another profile, and the [signal@AstalPowerProfiles.PowerProfiles::profile_released] signal will be emitted.</doc>
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
				<parameter name="profile" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="reason" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
				<parameter name="application_id" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<method name="release_profile" c:identifier="astal_power_profiles_power_profiles_release_profile">
			<doc xml:whitespace="preserve">This removes the hold that was set on a profile.</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
				<parameter name="cookie" transfer-ownership="none">
					<type name="guint" c:type="guint" />
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="astal_power_profiles_power_profiles_new">
			<return-value transfer-ownership="full">
				<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
			</return-value>
		</constructor>
		<property name="active-profile" writable="1">
			<doc xml:whitespace="preserve">The type of the currently active profile. It might change automatically if a profile is held, using the [method@
AstalPowerProfiles.PowerProfiles.hold_profile] method.</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_active_profile" c:identifier="astal_power_profiles_power_profiles_get_active_profile">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_active_profile" c:identifier="astal_power_profiles_power_profiles_set_active_profile">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*" />
				</parameter>
			</parameters>
		</method>
		<property name="icon-name">
			<doc xml:whitespace="preserve">Return a named icon based [property@AstalPowerProfiles.PowerProfiles:active_profile].</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_icon_name" c:identifier="astal_power_profiles_power_profiles_get_icon_name">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
			</parameters>
		</method>
		<property name="actions">
			<doc xml:whitespace="preserve">List of the "actions" implemented in the running daemon. This can used to figure out whether particular functionality is available in 
the daemon.</doc>
			<array c:type="gchar**">
				<type name="utf8" c:type="gchar*" />
			</array>
		</property>
		<method name="get_actions" c:identifier="astal_power_profiles_power_profiles_get_actions">
			<return-value transfer-ownership="full">
				<array length="0" c:type="gchar**">
					<type name="utf8" c:type="gchar*" />
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*" />
				</parameter>
			</parameters>
		</method>
		<method name="get_active_profile_holds" c:identifier="astal_power_profiles_power_profiles_get_active_profile_holds">
			<return-value transfer-ownership="full">
				<array length="0" c:type="AstalPowerProfilesHold*">
					<type name="AstalPowerProfiles.Hold" c:type="AstalPowerProfilesHold" />
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*" />
				</parameter>
			</parameters>
		</method>
		<property name="performance-degraded">
			<doc xml:whitespace="preserve">This will be set if the performance power profile is running in degraded mode, with the value being used to identify the reason for that 
degradation. Possible values are: - "lap-detected" (the computer is sitting on the user's lap) - "high-operating-
temperature" (the computer is close to overheating) - "" (the empty string, if not performance is not degraded)
</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_performance_degraded" c:identifier="astal_power_profiles_power_profiles_get_performance_degraded">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
			</parameters>
		</method>
		<method name="get_profiles" c:identifier="astal_power_profiles_power_profiles_get_profiles">
			<return-value transfer-ownership="full">
				<array length="0" c:type="AstalPowerProfilesProfile*">
					<type name="AstalPowerProfiles.Profile" c:type="AstalPowerProfilesProfile" />
				</array>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
				<parameter name="result_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*" />
				</parameter>
			</parameters>
		</method>
		<property name="version">
			<doc xml:whitespace="preserve">The version of the power-profiles-daemon software.</doc>
			<type name="utf8" c:type="gchar*" />
		</property>
		<method name="get_version" c:identifier="astal_power_profiles_power_profiles_get_version">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*" />
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
				</instance-parameter>
			</parameters>
		</method>
		<glib:signal name="profile-released">
			<doc xml:whitespace="preserve">Emitted when the profile is released because [property@AstalPowerProfiles.PowerProfiles:active_profile] was manually changed. This will 
only be emitted to the process that originally called [method@AstalPowerProfiles.PowerProfiles.hold_profile].</doc>
			<return-value transfer-ownership="full">
				<type name="none" c:type="void" />
			</return-value>
			<parameters>
				<parameter name="cookie" transfer-ownership="none">
					<type name="guint" c:type="guint" />
				</parameter>
			</parameters>
		</glib:signal>
	</class>
	<record name="PowerProfilesClass" c:type="AstalPowerProfilesPowerProfilesClass" glib:is-gtype-struct-for="PowerProfiles">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass" />
		</field>
	</record>
	<record name="PowerProfilesPrivate" c:type="AstalPowerProfilesPowerProfilesPrivate" disguised="1" />
	<record name="Profile" c:type="AstalPowerProfilesProfile" c:symbol-prefix="profile" glib:type-name="AstalPowerProfilesProfile" glib:get-type="astal_power_profiles_profile_get_type">
		<field name="profile" writable="1">
			<doc xml:whitespace="preserve">Will be one of: - "power-saver" (battery saving profile) - "balanced" (the default profile) - "
performance" (a profile that does not care about noise or battery consumption)</doc>
			<type name="utf8" c:type="gchar*" />
		</field>
		<field name="cpu_driver" writable="1">
			<type name="utf8" c:type="gchar*" />
		</field>
		<field name="platform_driver" writable="1">
			<type name="utf8" c:type="gchar*" />
		</field>
		<field name="driver" writable="1">
			<doc xml:whitespace="preserve">Identifies the power-profiles-daemon backend code used to implement the profile.</doc>
			<type name="utf8" c:type="gchar*" />
		</field>
	</record>
	<record name="Hold" c:type="AstalPowerProfilesHold" c:symbol-prefix="hold" glib:type-name="AstalPowerProfilesHold" glib:get-type="astal_power_profiles_hold_get_type">
		<field name="application_id" writable="1">
			<type name="utf8" c:type="gchar*" />
		</field>
		<field name="profile" writable="1">
			<type name="utf8" c:type="gchar*" />
		</field>
		<field name="reason" writable="1">
			<type name="utf8" c:type="gchar*" />
		</field>
	</record>
	<constant name="MAJOR_VERSION" c:identifier="ASTAL_POWER_PROFILES_MAJOR_VERSION" value="0">
		<type name="gint" c:type="gint" />
	</constant>
	<constant name="MINOR_VERSION" c:identifier="ASTAL_POWER_PROFILES_MINOR_VERSION" value="1">
		<type name="gint" c:type="gint" />
	</constant>
	<constant name="MICRO_VERSION" c:identifier="ASTAL_POWER_PROFILES_MICRO_VERSION" value="0">
		<type name="gint" c:type="gint" />
	</constant>
	<constant name="VERSION" c:identifier="ASTAL_POWER_PROFILES_VERSION" value="0.1.0">
		<type name="utf8" c:type="const gchar*" />
	</constant>
	<function name="get_default" c:identifier="astal_power_profiles_get_default">
		<return-value transfer-ownership="full">
			<type name="AstalPowerProfiles.PowerProfiles" c:type="AstalPowerProfilesPowerProfiles*" />
		</return-value>
	</function>
</namespace>
</repository>